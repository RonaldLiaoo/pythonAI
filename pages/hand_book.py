import streamlit as st

with st.expander("Class1 課堂筆記"):
    st.write(
        """
        # Class1 課堂筆記

        ## 你好，這裡是 H1

        ### 這裡是 H2

        #### 這裡是 H3

        ##### 這裡是 H4

        ## 這裡是程式區塊

        ```python
        print("Hello World") # 可以顯示文字
        ```

        ---
        """
    )

with st.expander("Class1 教學筆記"):
    st.write(
        """
        # Class1 教學筆記

##### PPT 3~100 頁

## 建立環境

1. github

   - 開源不代表免費，可以看到專業的工程師寫的 code 但這些程式有時候會附上 LICENCE(授權條款)來規定想要使用的人可以運用在哪裡
   - 實際開啟 Apple、Google、Microsoft 等公司的專案來讓學生看到工程師們目前的工作狀態(commit status)
   - 對學生來說這是個存放自己練習作品的好地方，就像 google 雲端空間一樣，只是變成專門存放程式的雲端空間
   - 不用擔心自己的專案被看見，因為在搜尋專案的時候，其他人的專案排名總會在自己的專案前面，被看到的機率也很低(除非刻意針對開發者名稱進行搜尋)，所以請學生不用太擔心把程式放上去給別人看是一件很奇怪的事情
   - 也因為你的程式碼可能被看見所以記得不要上傳重要的密碼或驗證碼之類的還是有機會被盜用或負面利用
   - **新增專案流程**

2. streamlit

   - 這是借用雲端電腦的地方
   - 雲端電腦可以想像是一台不會關機的電腦(伺服器)
   - 這個平台的雲端電腦專門拿來跑 Streamlit 框架的 Python 程式，Streamlit 框架會在後面知識點當中介紹
   - 使用的原因：
     - 在程式執行的時候電腦要一直開著，一但電腦關機了以後，想要使用你製作的網站的客戶就沒辦法使用
     - 所以需要跟其他公司平台借用一下雲端電腦，把程式放到雲端電腦當中執行，確保大家都可以隨時訪問你的網站
   - **申請操作步驟**
   - **如何重新啟動雲端電腦**

3. 安裝 git、python

4. vscode & copilot

## AI 介紹與原理說明

- 以 ChatGPT 為例
- Token 概念與視覺化
  - Token 是 AI 看符號的最小單位，這與我們肉眼看到的幾個文字以及文字的組成完全不同。
  - 開啟 https://platform.openai.com/tokenizer，把中英文字、Emoji 貼上去，觀察一句話如何被切成多個 token 並標示編號與色塊。
  - 每種模型都有最大 token 上限(context window)，超過就無法輸出完整內容，這就像每個模型的短期記憶一樣；設計 Prompt 前要先估算字數並保留回應餘量。
- 回歸型語言模型運作原理：文字接龍
  - 模型的核心任務是「下個 Token 預測（Next-Token Prediction）」——就像玩接龍：輸入「春天到了，櫻花」→ 模型依機率挑選最可能出現的下一個詞（例如「盛開」）。
  - 重複以上步驟直到達到停止條件。
  - 把「生成結果」再次餵回模型、讓它繼續預測，稱為「自回歸（autoregressive）」結構，是目前主流 LLM 的基礎。
- **負責任地使用 AI**
  - AI 是「輔助工具」，不具「最終決策權」；人類必須為產出負責。
  - **醫療情境**：醫師用 AI 判讀 X 光，最終診斷仍需醫師簽名；若誤診造成傷害，法律責任在醫師與醫院，而非 AI。
- 教學如何使用 AI
  - 在對 AI 原理有概念的情況下，我們應該開始調整詢問方式，目標轉向為如何提高 Prompt 的品質。
  - 把問題問得更清楚，在一場對話當中盡量優化 Context Window 的大小，讓內容保持精簡重要
  - 不要透過”連續”對話來修正問問題的方式，如果問得不好或指令不明確要返還回去剛剛提問的地方做修正來確保整的對話串都是高品質的內容。
  - 讓 AI 用詞降階到你可以看得懂的年齡(邊的年齡會根據不同人的語文程度受到影響，所以要反覆嘗試自己對 AI 來說適合哪一個年紀的對話方式)。
- 課程允許／鼓勵使用的 AI 工具
  - **ChatGPT（OpenAI）**：文字生成、程式除錯、摘要整理。
  - **Gemini（Google）**：多模態搜尋、即時回饋練習。
- 當今天使用 AI 完成程式時
  - 要開始練習詳細說明與描述程式內容
  - 想辦法運用剛剛學得的技巧來調整 Prompt，讓 AI 解釋到讓你看得懂
  - 前面幾次可以示範如何使用 AI 來進行學習
- **AI 筆記自動統整**
  - 每天下課前 10 分鐘，將重點貼到 DC 指定頻道；助教利用 LLM 產出 Markdown 摘要並 pin 置頂，方便複習。
- **Prompt 資源分享**
  - 老師會把示範 Prompt 整理成「提示卡」放在 DC 公告區；同學可複製後改寫並於回帖分享改良版本。

## 檔案格式

- 格式：`class<上課天數>-<練習編號>.py`
- 例：`class3-2.py` 表示 **第 3 天**課程的 **第 2 個**練習
- 建議全部使用小寫並以半形連字號 分隔，保持統一且易讀

## 註解

- 可以拿來做筆記的好地方，也是提示 AI 目前或接下來要做什麼的好方法。
- **基本操作**
  - **單行註解**：
    - 在行首加 `#`。
    - 太麻煩？將游標放在想要註解的行列當中，按 `Ctrl + /`（macOS 為 `⌘ + /`）快速切換。
  - **多行／區塊註解**：
    - 框選多行後再按一次 `Ctrl + /`，可一次加入或移除 `#`。
    - 用來分段測試程式最方便。

## 資料型態

- 為什麼要有資料型態？
  - 想像一下，如果你的房間亂七八糟、沒有分類，當你要找一個東西時會花很久的時間。但如果一開始就把房間的東西整理分類好，找東西的速度就會變得非常快。
    電腦也是這樣：為了讓執行程式的速度變快，電腦會把資料整理成不同的「資料型態」，針對不同型態進行特別處理。這也是為什麼當我們請電腦計算數學或搜尋資料時，它可以跑得那麼快的原因。
- 常見資料型態
  - **整數（Integer）**
    - 像 `1`、`100`、`42` 這種不帶小數點的數字。
  - **小數（浮點數，Float）**
    - 像 `3.14`、`0.01`，帶有小數點的數字。
    - 這裡要特別注意：程式裡的小數，跟學校數學課學到的小數有點像，但也有點不一樣。
    - 在程式中，只要有小數點的符號，Python 就會自動把它判定為小數型態（即使像 `123.` 這樣只是點了小數點、後面沒寫 `0` 也算）。
    - 而在數學課上，老師通常會叫你省略掉不必要的 `.0` 或小數點，讓答案更簡潔。
    - 但在程式裡，符號是很重要的，因為電腦是靠這些符號來分辨資料型態。記住，哪怕只是多打了一個點，也會讓數字變成小數型態，不再是整數。
  - **布林（Boolean）**
    - 只有兩種值：`True` 或 `False`，就像開燈（On）和關燈（Off）一樣，只有兩種狀態。
    - 在 Python 裡，`True` 和 `False` 的第一個字母一定要大寫，不能用小寫。
    - 有些其他程式語言（像 JavaScript）可能會用小寫，但因為我們現在學的是 Python，所以要特別記得 Python 的寫法。
  - **字串（String）**
    - 像 `"Hello"` 或 `'Python'`，用來表示文字。
    - 可以用單引號 `'` 或雙引號 `"` 包起來，但不能混用（不能一邊用單引號、一邊用雙引號）。
    - 就像我們的耳朵成雙成對，要搭配好，不能隨便換另一邊。

## 函式

- **什麼是函式？**
  - 在 Python 裡，函式（也叫「函數」或「指令」）是一段幫我們完成特定任務的程式。
  - 你可以想像成下指令給電腦，請它幫你做事。
- **函式的基本組成**
  - **名稱**：告訴電腦你要執行哪個任務。
  - **括弧（()）**：寫在名稱後面，用來放進去的資料。
    - 有些函式需要你提供資料，有些則不需要。
    - 括弧裡的資料，就像是提供給函式的「素材」或「參考資料」。
- **以 `max()` 為例**
  - 作用：找出一堆資料裡「最大」的那個。
  - 使用方式：
    - 如果只寫 `max()` 而裡面沒放東西，電腦不知道要比什麼，自然就找不出最大值。
    - 如果寫 `max(1, 2, 3)`，電腦就會幫你在這三個數字裡找出最大的。
    - 你也可以放更多數字進去，試試看！
  - 執行後會怎樣？
    - `max()` 會「回傳」結果，也就是把找到的最大值丟回來給你。
    - 不同的函式，回傳的資料和呈現方式可能不一樣，之後學更多函式時，我們可以慢慢觀察。
- **重要提醒**
  - 函式基本組成 → **名稱 + 括弧**
  - 括弧裡的東西是函式要用來計算、分析、處理的資料。
  - 不要忘了！沒放資料的話，某些函式是沒辦法運作的喔。

## print

- **什麼是 `print()`？**
  - `print()` 是 Python 裡用來把資料「顯示」在終端機上的指令。
  - 它可以幫助我們寫程式時，隨時檢查資料的內容，看看程式有沒有按照預期運作。
- **`print()` 可以放什麼資料？**
  - 我們之前學到的資料型態通通可以放進去：
    - `False`（布林值）、
    - `3.14`（小數）、
    - `100`（整數）、
    - `"Hello World"`（字串）。
  - 未來還會學到更多新的資料型態，`print()` 一樣可以幫我們把它們顯示出來。
  - 所以這個指令之後會常常用到，是我們寫程式的重要工具之一！
- **執行方式**
  - 在程式中寫好 `print()` 後，按下 IDE 右上角的播放鍵 ▶ 執行程式。
  - 看終端機上是否有正確顯示資料。
  - 如果執行後沒看到輸出，記得找老師幫忙確認喔！
- **重要提醒**
  - `print()` 是幫助我們檢查程式輸出、觀察資料的好幫手。
  - 不論是數字、文字、布林值，甚至是未來會學到的新資料型態，都可以試著用 `print()` 印出來看看結果。

## 變數與運算

- **什麼是變數？**
  - 變數就是電腦裡用來「存資料」的空間。
  - 我們可以要求電腦幫我們開一個空間，貼上標籤、取一個名字，像是 `A`，方便之後拿來用。
  - 想像一下：變數就像是一個小盒子，你可以把東西放進去，再把盒子上的名字貼好，之後就能根據名字把東西拿出來。
- **等號（=）在程式裡的用途**
  - 注意！程式裡的等號（=）和數學課上的等號不一樣。
  - **數學裡的等號** → 拿來呈現計算結果。
    - 例如：1 + 2 = 3。
  - **程式裡的等號** → 拿來「指定」資料，意思是把右邊的資料存進左邊的變數裡。
    - 想像成水管，右邊的資料流進左邊的變數空間。
- **範例**
  ```python
  A = "ABC"
  print(A)
  ```
  - `A = "ABC"`：把字串 `"ABC"` 存進變數 `A` 裡。
  - `print(A)`：印出變數 `A` 裡的內容，結果會顯示 `ABC`。
- **變數可以存哪些東西？**
  - 在 Python 裡，變數可以存「任何型態」的資料：
    - 整數（Integer）
    - 小數（Float）
    - 布林值（Boolean）
    - 字串（String）
    - 甚至更複雜的資料型態（之後會學到）
  - 跟以前學過的圖形化程式（像 Scratch）比起來，Python 給了我們更多彈性，只要寫得清楚，幾乎什麼都能存！
- **什麼是運算式？**
  - 在程式裡，運算式由兩個部分組成：
    1. **運算元（Operand）**：拿來計算的資料，像是數字。
    2. **運算子（Operator）**：對資料做什麼運算的符號，像是加法、減法。
  - 跟數學課比起來，程式裡會更明確區分這兩個名詞，幫助我們更清楚了解計算的細節。
- **常見的運算子**
  - **加法 `+`**
  - **減法 `-`**
  - **乘法** `*`→ 一顆星星。
  - **次方 `**`** → 兩顆星星，例如 `2 \*\* 3` 表示 2 的三次方。
  - **除法（小數） `/`**
  - **除法（整數） `//`** → 只取整數部分，去掉小數。
  - **取餘數 `%`** → 算出兩數相除後的「餘數」。
- **範例**
  ```python
  print(2 + 3)    # 5，加法
  print(5 - 1)    # 4，減法
  print(4 * 2)    # 8，乘法
  print(2 ** 3)   # 8，次方，2 的三次方
  print(5 / 2)    # 2.5，小數除法
  print(5 // 2)   # 2，整數除法
  print(5 % 2)    # 1，取餘數

  ```
- **小提醒**
  - 這些運算子雖然看起來是「數學運算」，但未來我們會學到，某些運算子也能用在其他資料型態上（例如字串的加法）。
  - 目前先專注在數字型態（整數、浮點數）的運算。
- **運算優先順序（Operator Precedence）**
  - 這是指當一個式子裡有好幾個運算子時，程式會先算哪個、後算哪個。
  - 基本順序如下：
    1. 括號 `()` → 先算裡面的東西。
    2. 次方 `**`。
    3. 乘法 `*`、除法 `/`、整數除法 `//`、取餘數 `%`。
    4. 加法 `+`、減法 `-`。
  - 之後學到新符號會更新進表裡，請大家記得這張表的優先順序。

## 字串與格式化

- **為什麼要學字串運算？**
  - 剛剛我們學了數字的加法、乘法等運算符號，現在來看看字串上也能用的運算符號有哪些。
  - 這些運算可以幫助我們更靈活地處理和組合文字。
- **字串加法 `+`**
  - 功能：把兩個或多個字串串接在一起。
  - 範例：
    ```python
    print("Hello" + "World")   # 結果：HelloWorld（中間沒有空格）

    ```
  - 小提醒：
    - 如果想在兩個字串中間加空格，可以直接加上一個包含空格的字串。
    - 範例：
      ```python
      print("Hello" + " " + "World")   # 結果：Hello World

      ```
    - 也可以把空格放在第一個字串的尾端或第二個字串的開頭，效果都一樣。
  - 注意：字串的串接有順序，就像排隊一樣，先寫的會排在前面。
- **字串乘法**
  - 功能：重複某個字串指定的次數。
  - 範例：
    ```python
    print("Hello" * 3)   # 結果：HelloHelloHello

    ```
  - 小提醒：
    - 不能用兩個字串中間放 來做乘法，正確寫法是「字串 \* 數字」。
    - 如果想讓每次重複時換行，可以加上特殊字元 `\n`（代表換行）。
      ```python
      print(("Hello\n") * 3)
      # 結果：
      # Hello
      # Hello
      # Hello

      ```
    - `\n` 的寫法：
      - 是反斜線 `\`（在 Enter 上方的按鍵，不是除法的斜線 `/`）。
      - `\n` 代表換行。
    - 如果不想換行，只想要空格隔開，可以這樣寫：
      ```python
      print(("Hello " ) * 3)   # 結果：Hello Hello Hello

      ```
  - 注意：乘法可以快速生成大量重複的字串，但記得搭配換行或空格，否則畫面看起來會擠在一起不好閱讀。
- **為什麼要學格式化字串？**
  - 當我們想把不同型態的資料（例如字串、整數、布林值）結合在一起，變成一段完整的文字時，單純用加法（`+`）會失敗，因為不同型態不能直接相加。
  - 格式化字串提供了一種簡單的方法，讓我們可以把各種資料放進字串裡，並正確呈現出來。
- **什麼是格式化字串？**
  - 在字串前加上小寫字母 `f`（代表 format），然後在字串裡用大括號 `{}` 包住要放進去的資料或變數。
  - 程式會自動把大括號裡的內容轉成字串，然後跟前後的文字結合。
- **範例：**
  ```python
  name = "Python"
  age = 31
  print(f"我是{name}，今年{age}歲了。")

  ```
  - 執行結果：
    ```
    我是Python，今年31歲了。

    ```
- **使用重點：**
  - 格式化字串的 `f` 一定要寫在字串前面（在引號的外面）。
  - 大括號 `{}` 裡可以放變數，也可以放任何型態的資料，程式會幫你轉換。
  - 注意：不同型態的資料不能直接用 `+` 串接，必須透過像這樣的格式化處理才能結合。
- **小提醒：**
  - 格式化字串是目前 Python 主流用法，比舊版本的 `.format()` 更簡單直覺。
  - 雖然之後會學到「型態轉換」的方法，但現在用格式化字串就已經可以輕鬆做到多型態結合。
  - 如果忘記怎麼用，記得關鍵就是：
    1. 字串前加 `f`。
    2. 要插入資料的地方用 `{}`。

## len type int float bool str input

- **為什麼要學 `len()`？**
  - 在英文裡，`length` 代表「長度」。
  - 在程式裡，我們用 `len()` 這個指令來量測資料的長度。
  - 注意喔，程式世界裡很多指令名稱都會被縮短（因為工程師很懶！），像 `length` 就只留前三個字母變成 `len`。
- **目前我們能量測什麼？**
  - 到目前為止，我們學過的資料型態裡，只有「字串」能用 `len()` 量測長度。
  - 因為：
    - 數字本身已經是「有量」的東西，不需要額外去量它的長度。
    - 字串則是由多個字元組成，需要數一數裡面有幾個字元。
  - 未來我們會學到其他複雜的資料型態，也能用 `len()`，但那是之後的事了，現在先專注在字串。
- **`len()` 怎麼用？**
  - 語法：
    ```python
    len(資料)

    ```
  - 範例：
    ```python
    print(len("Hello"))   # 結果：5
    print(len(""))        # 結果：0（空字串長度是 0）
    print(len("哈囉！"))   # 結果：3（每個中文字或標點算一個字元）

    ```
- **小提醒：**

  - `len()` 回傳的是整數（Integer）。
  - 括號裡放的東西必須是能量測長度的資料型態（目前我們只用字串）。
  - 空字串的長度是 0，不要搞錯喔。

- **為什麼要學 `type()`？**
  - 在寫程式時，我們常常需要知道「這個資料是什麼型態？」
  - 特別是當：
    - 使用別人寫好的指令或工具時，不確定它回傳什麼型態的結果。
    - 測試自己寫的程式時，想確認變數或資料的型態是否正確。
  - 這時候就可以用 `type()`，請 Python 告訴我們資料的型態。
- **`type()` 怎麼用？**
  - 語法：
    ```python
    type(資料)

    ```
  - 範例：
    ```python
    print(type(123))          # 結果：<class 'int'>（整數）
    print(type(3.14))         # 結果：<class 'float'>（小數）
    print(type("Hello"))      # 結果：<class 'str'>（字串）
    print(type(True))         # 結果：<class 'bool'>（布林值）
    print(type(len("Hi")))    # 結果：<class 'int'>（len() 回傳的是整數）

    ```
- **使用重點：**
  - `type()` 回傳的東西會長得像 `<class '資料型態'>`，告訴你這個資料屬於哪一類。
  - 括號裡可以放任意資料、變數或表達式，幫助我們快速確認型態。
- **小提醒：**
  - 在寫比較大的專案、或調整陌生的程式時，養成隨時確認資料型態的習慣，可以減少錯誤。
  - 試試看，把你剛剛學過的各種資料型態（整數、小數、字串、布林值）都丟進 `type()` 測試看看！
- **為什麼要學型態轉換？**
  - 在程式裡，有時候我們需要把一種資料型態轉換成另一種，才能進行運算或處理。
  - Python 提供了很多內建的轉換方法，讓我們可以把資料變成整數、小數、布林值或字串。

---

### 1️⃣ 轉換成整數 → `int()`

- 語法：
  ```python
  int(資料)

  ```
- 範例：
  ```python
  print(int(True))         # 結果：1
  print(int(False))        # 結果：0
  print(int("123"))        # 結果：123（字串數字 → 整數）
  print(int("hello"))      # 錯誤：字串不是數字，無法轉換

  ```
- 小提醒：
  - 布林值 `True` 會轉成 `1`，`False` 會轉成 `0`。
  - 字串只能轉成整數，必須是「看得懂的數字」的字串，像 `"123"`。
  - 無法轉換的內容（例如 `"hello"`）會直接發生錯誤。
  - 之後我們會學到怎麼避免這類錯誤。

---

### 2️⃣ 轉換成小數 → `float()`

- 語法：
  ```python
  float(資料)

  ```
- 範例：
  ```python
  print(float(True))        # 結果：1.0
  print(float(123))         # 結果：123.0
  print(float("3.14"))      # 結果：3.14
  print(float("hello"))     # 錯誤：字串不是數字，無法轉換

  ```
- 小提醒：
  - 跟 `int()` 一樣，布林值、數字、數字字串都能轉換。
  - 轉換後會自動帶上小數點，例如 `123 → 123.0`。
  - 不符合數字的字串會轉換失敗。

---

### 3️⃣ 轉換成布林值 → `bool()`

- 語法：
  ```python
  bool(資料)

  ```
- 範例：
  ```python
  print(bool(0))            # 結果：False
  print(bool(1))            # 結果：True
  print(bool(-2))           # 結果：True
  print(bool(""))           # 結果：False（空字串）
  print(bool("hello"))      # 結果：True（非空字串）

  ```
- 小提醒：
  - 判斷標準是「有沒有東西」：
    - `0`、空字串 `""` → `False`
    - 其他（不管是正數、負數、非空字串）→ `True`

---

### 4️⃣ 轉換成字串 → `str()`

- 語法：
  ```python
  str(資料)

  ```
- 範例：
  ```python
  print(str(123))           # 結果："123"
  print(str(3.14))          # 結果："3.14"
  print(str(True))          # 結果："True"
  print(str(False))         # 結果："False"

  ```
- 小提醒：

  - 不管丟進去什麼東西，`str()` 都會幫你加上單引號或雙引號，變成字串。
  - 是最簡單也最萬用的轉換方式。

- **什麼是 `input()`？**
  - `input()` 是 Python 裡用來「讓使用者輸入資料」的指令。
  - 它會讓程式暫停下來，在終端機等使用者輸入，然後把輸入的內容存起來。

---

### 一開始的用法

- 最簡單的 `input()`：
  ```python
  input()

  ```
  - 程式執行後，終端機會空著等你輸入（沒有提示文字）。
  - 你可以直接在終端機打字、按 Enter，輸入的內容就會變成字串，程式會拿到這個字串。

---

### 括號裡加上字串

- 如果在括弧裡放進字串，例如：
  ```python
  input("請輸入你的名字：")

  ```
  - 終端機會先顯示這段字串作為提示 → **「請輸入你的名字：」**。
  - 接下來，程式會從右到左、從裡到外執行：
    1. 執行 `input()`，等待使用者輸入。
    2. 使用者輸入內容、按 Enter。
    3. `input()` 把輸入的內容當作字串回傳。
    4. 等號 `=`（像一根水管）把字串存到左邊的變數裡。

---

### 範例詳解

```python
name = input("請輸入你的名字：")
print(f"哈囉，{name}！很高興認識你。")

```

- 執行順序：
  1. 終端機顯示：請輸入你的名字：
  2. 等待使用者輸入（例如：小明）。
  3. `input()` 把「小明」當作字串回傳。
  4. 等號 `=` 把這個字串存進 `name` 變數。
  5. 下一行用 `print()` 和格式化字串（`f"..."`）把 `name` 顯示在句子裡。

---

### 小提醒

- **回傳型態**：
  - 不管使用者輸入什麼，`input()` 拿回來的永遠是字串。
  - 如果需要做數字運算，要先用 `int()` 或 `float()` 轉換。
  例如：
  ```python
  age = int(input("請輸入你的年齡："))
  print(f"你明年就 {age + 1} 歲了！")

  ```
- **結合已學概念**：
  - 你可以把 `input()` 的結果：
    - 存進變數裡（變數單元學過的）。
    - 放進格式化字串 `f"..."` 直接輸出。
    - 結合 `type()` 檢查型態。
    - 用 `len()` 算輸入的字數。

## 模組 streamlit 安裝與使用
"""
    )
